##
# File:    ChemCompDpUtilityTests.py
# Date:    25-Feb-2021
#
# Updates:
# 25-Feb-2021 wmb Testing some ligand lite operations migrated to the backend
##

__docformat__ = "restructuredtext en"
__author__    = "Weslley Morellato Bueno"
__email__     = "wbueno@ebi.ac.uk"
__license__   = "Creative Commons Attribution 3.0 Unported"
__version__   = "V1.0"

import sys, unittest, traceback
import time, os, os.path
from wwpdb.apps.ccmodule.utils.ChemCompDpUtility import ChemCompDpUtility, ChemCompDpInputs

class ChemCompDpUtilityTests(unittest.TestCase):
    """This class tests the API for requesting files generated by
    the chemical components report.
    """

    def setUp(self):
        self.__verbose = False
        self.__lfh = sys.stderr
        self.__topPath = os.getenv('WWPDB_CCMODULE_TOP_PATH')
        
        self._ccDpUtility = ChemCompDpUtility('D_800004', self.__verbose, self.__lfh)
        self._ccAssignFile = os.path.join(os.path.dirname(__file__), 'fixtures', 'D_800004_cc-assign_P1.cif.V1')
        self._testCcInstanceFilePath = os.path.join(os.path.dirname(__file__), 'fixtures', '1_H_0G7_701_.cif')
        self._instId = '1_H_0G7_701_'
        self._topHitId = '0G7'

    def test_process_cc_assign(self):
        # missing cc assign file
        with self.assertRaises(RuntimeError):
            self._ccDpUtility._processCcAssignFile()

        self._ccDpUtility.addInput(ChemCompDpInputs.FILE_CC_ASSIGN, '/tmp/foobar')
        with self.assertRaises(IOError):
            self._ccDpUtility._processCcAssignFile()
    
    def test_gen_report_data(self):
        # testing experimental instance reports
        self._ccDpUtility._genLigandReportData(self._instId, self._testCcInstanceFilePath, 'exp')

        repPath = os.path.join(self._ccDpUtility._ccReportPath, self._instId, 'report')
        self.assertTrue(os.path.exists(os.path.join(repPath, '{}_report.html'.format(self._instId))))
        self.assertTrue(os.path.exists(os.path.join(repPath, '{}.cif'.format(self._instId))))
        self.assertTrue(os.path.exists(os.path.join(repPath, 'report.log')))

        with self.assertRaises(Exception):
            # just expect a generic exception
            self._ccDpUtility._genLigandReportData(self._instId, '/fake/path', 'exp')
        
        # testing reference reports

        self._ccDpUtility._genLigandReportData(self._topHitId, None, 'ref')

        repPath = os.path.join(self._ccDpUtility._ccReportPath, 'rfrnc_reports', self._topHitId)
        self.assertTrue(os.path.exists(os.path.join(repPath, '{}_report.html'.format(self._topHitId))))
        self.assertTrue(os.path.exists(os.path.join(repPath, '{}_ideal.cif'.format(self._topHitId))))
        self.assertTrue(os.path.exists(os.path.join(repPath, 'report.log')))

        with self.assertRaises(Exception):
            # just expect a generic exception
            self._ccDpUtility._genLigandReportData('---', None, 'ref')
    
    def test_instance_imaging_setup(self):
        tDict = {}

        tDict[self._topHitId] = {
            'alignList': [],
            'masterAlignRef': None,
        }

        outputTuple = (
            '1_H_0G7_701_',
            '/nfs/public/release/msd/services/onedep/data/production_py3_8/deposit/D_800004/assign/1_H_0G7_701_/1_H_0G7_701_.cif',
            '/nfs/public/release/msd/services/onedep/data/production_py3_8/deposit/D_800004/cc_report/1_H_0G7_701_.svg',
        )

        instanceChemCompFilePath = os.path.join(self._ccDpUtility._depositAssignPath, self._instId, self._instId + '.cif')
        self._ccDpUtility._imagingSetupForLigandInstance(self._instId, self._topHitId, tDict, instanceChemCompFilePath)
        self.assertEqual(tDict[self._topHitId]['masterAlignRef'], outputTuple)
    
    def test_tophit_imaging_setup(self):
        tDict = {}

        tDict[self._topHitId] = {
            'alignList': [],
            'masterAlignRef': None,
        }

        outputTuple = (
            '0G7',
            '/nfs/public/release/msd/services/onedep/deployments/production_py3_8/reference/components/ligand-dict-v3/0/0G7/0G7.cif',
            '/nfs/public/release/msd/services/onedep/data/production_py3_8/deposit/D_800004/cc_report/0G7.svg',
        )

        self._ccDpUtility._imagingSetupForTopHit(self._topHitId, self._topHitId, tDict)
        self.assertEqual(tDict[self._topHitId]['alignList'][0], outputTuple)

    def test_do_analysis(self):
        self._ccDpUtility.addInput(ChemCompDpInputs.FILE_CC_ASSIGN, self._ccAssignFile)
        self._ccDpUtility.doAnalysis()
    
if __name__ == '__main__':
    unittest.main()