##
# File:    ChemCompDpUtilityTests.py
# Date:    25-Feb-2021
#
# Updates:
# 25-Feb-2021 wmb Testing some ligand lite operations migrated to the backend
##

__docformat__ = "restructuredtext en"
__author__    = "Weslley Morellato Bueno"
__email__     = "wbueno@ebi.ac.uk"
__license__   = "Creative Commons Attribution 3.0 Unported"
__version__   = "V1.0"

import sys, unittest, traceback
import time, os, os.path
import shutil
from wwpdb.apps.ccmodule.utils.ChemCompDpUtility import ChemCompDpUtility, ChemCompDpInputs
from wwpdb.apps.ccmodule.utils.ChemCompConfig    import ChemCompConfig
from wwpdb.utils.session.WebRequest              import InputRequest
from wwpdb.utils.config.ConfigInfo               import ConfigInfo

unittest.TestLoader.sortTestMethodsUsing = None

class ChemCompDpUtilityTests(unittest.TestCase):
    """This class tests the API for requesting files generated by
    the chemical components report.
    """

    @classmethod
    def setUpClass(cls):
        cls._verbose = False
        cls._lfh = sys.stderr

        # setting up developmnet environment
        os.environ['WWPDB_SITE_ID'] = 'PDBE_DEV'

        cls._depId = 'D_800004'
        cls._cI = ConfigInfo()
        cls._reqObj = InputRequest({}, cls._verbose, cls._lfh)
        cls._reqObj.setValue('WWPDB_SITE_ID', cls._cI.get('SITE_PREFIX'))
        cls._reqObj.setValue('TOP_WWPDB_SESSIONS_PATH', cls._cI.get('TOP_WWPDB_SESSIONS_PATH'))
        cls._reqObj.setValue('SessionsPath', cls._cI.get('TOP_WWPDB_SESSIONS_PATH'))
        cls._reqObj.setValue('identifier', cls._depId)

        cls._ccConfig = ChemCompConfig(cls._reqObj, cls._verbose, cls._lfh)
        cls._setup_paths()
        
        # setting up class
        cls._ccDpUtility = ChemCompDpUtility('D_800004', cls._verbose, cls._lfh)
        cls._ccAssignFile = os.path.join(os.path.dirname(__file__), 'fixtures', 'D_800004_cc-assign_P1.cif.V1')
        cls._testCcInstanceFilePath = os.path.join(os.path.dirname(__file__), 'fixtures', '1_H_0G7_701_.cif')

        # shared between tests
        cls._fitTupleDict = {}
        cls._instId = '1_H_0G7_701_'
        cls._authAssignedId = '0G7'
        cls._fitTupleDict[cls._authAssignedId] = {
            'alignList': [],
            'masterAlignRef': None,
        }
    
    @classmethod
    def _setup_paths(cls):
        """Create the required paths
        """
        cls._ccDictPath = os.path.join(cls._ccConfig.getPath('chemCompCachePath'), '0', '0G7')
        cls._depositPath = os.path.join(cls._cI.get('SITE_DEPOSIT_STORAGE_PATH'), cls._cI.get('DEPOSIT_DIR_NAME'))
        cls._ccReportPath = os.path.join(cls._depositPath, cls._depId, ChemCompDpUtility._CC_REPORT_DIR)
        cls._depositAssignPath = os.path.join(cls._depositPath, cls._depId, ChemCompDpUtility._CC_ASSIGN_DIR)

        os.makedirs(cls._ccDictPath, exist_ok=True)
        os.makedirs(cls._depositPath, exist_ok=True)
        os.makedirs(cls._ccReportPath, exist_ok=True)
        os.makedirs(cls._depositAssignPath, exist_ok=True)

    def test_process_cc_assign(self):
        # missing cc assign file
        with self.assertRaises(RuntimeError):
            self._ccDpUtility._processCcAssignFile()

        self._ccDpUtility.addInput(ChemCompDpInputs.FILE_CC_ASSIGN, '/tmp/foobar')
        with self.assertRaises(IOError):
            self._ccDpUtility._processCcAssignFile()

    def test_gen_report_data(self):
        # testing experimental instance reports
        self._ccDpUtility._genLigandReportData(self._instId, self._testCcInstanceFilePath, 'exp')

        repPath = os.path.join(self._ccReportPath, self._instId, 'report')
        self.assertTrue(os.path.exists(os.path.join(repPath, '{}.cif'.format(self._instId))))
        self.assertTrue(os.path.exists(os.path.join(repPath, 'report.log')))

        with self.assertRaises(Exception):
            # just expect a generic exception
            self._ccDpUtility._genLigandReportData(self._instId, '/fake/path', 'exp')
        
        # testing reference reports

        self._ccDpUtility._genLigandReportData(self._authAssignedId, None, 'ref')

        repPath = os.path.join(self._ccReportPath, 'rfrnc_reports', self._authAssignedId)
        self.assertTrue(os.path.exists(os.path.join(repPath, 'report.log')))

        with self.assertRaises(Exception):
            # just expect a generic exception
            self._ccDpUtility._genLigandReportData('---', None, 'ref')
    
    def test_A_imaging_setup(self):
        open(os.path.join(self._ccDictPath, '0G7.cif'), 'w').close()

        outputTuple = (
            '1_H_0G7_701_',
            os.path.join(self._depositAssignPath, '1_H_0G7_701_', '1_H_0G7_701_.cif'),
            os.path.join(self._ccReportPath, '1_H_0G7_701_.svg'),
        )

        instanceChemCompFilePath = os.path.join(self._depositAssignPath, self._instId, self._instId + '.cif')
        self._ccDpUtility._imagingSetupForLigandInstance(self._instId, self._authAssignedId, self._fitTupleDict, instanceChemCompFilePath)
        self.assertEqual(self._fitTupleDict[self._authAssignedId]['masterAlignRef'], outputTuple)

    def test_B_imaging_setup(self):
        outputTuple = (
            '0G7',
            os.path.join(self._ccConfig.getPath('chemCompCachePath'), '0', '0G7', '0G7.cif'),
            os.path.join(self._ccReportPath, '0G7.svg')
        )

        self._ccDpUtility._imagingSetupForTopHit(self._authAssignedId, self._authAssignedId, self._fitTupleDict)
        self.assertEqual(self._fitTupleDict[self._authAssignedId]['alignList'][0], outputTuple)

    @unittest.skip
    def test_gen_images(self):
        shutil.copyfile(os.path.join(os.path.dirname(__file__), 'fixtures', '1_H_0G7_701_.svg'), os.path.join(self._ccReportPath, '1_H_0G7_701_.svg'))

        tupleDict = {
            '0G7': {
                'alignList': [(
                    self._authAssignedId,
                    os.path.join(self._ccConfig.getPath('chemCompCachePath'), '0', '0G7', '0G7.cif'),
                    os.path.join(self._ccReportPath, '0G7.svg')
                )],
                'masterAlignRef': (
                    self._instId,
                    os.path.join(self._depositAssignPath, '1_H_0G7_701_', '1_H_0G7_701_.cif'),
                    os.path.join(self._ccReportPath, '1_H_0G7_701_.svg')
                )
            }
        }

        self._ccDpUtility._genAligned2dImages(self._fitTupleDict)
        
        imgPath = os.path.join(self._ccReportPath, '{}.svg'.format(self._instId))
        self.assertTrue(os.path.exists(imgPath))

        imgPath = os.path.join(self._ccReportPath, '{}.svg'.format(self._authAssignedId))
        self.assertTrue(os.path.exists(imgPath))

    def test_write_align_file_list(self):
        original = ''
        generated = ''
        fileListPath = os.path.join(self._ccReportPath, 'alignfilelist_{}.txt'.format(self._authAssignedId))

        self._ccDpUtility._createAlignFileList(self._authAssignedId, fileListPath, self._fitTupleDict)

        with open(os.path.join(os.path.dirname(__file__), 'fixtures', 'alignfilelist_0G7.txt')) as f:
            original = f.read()
        
        with open(os.path.join(self._ccReportPath, 'alignfilelist_0G7.txt')) as f:
            generated = f.read()

        self.assertEqual(original, generated)

    @unittest.skip
    def test_do_analysis(self):
        self._ccDpUtility.addInput(ChemCompDpInputs.FILE_CC_ASSIGN, self._ccAssignFile)
        self._ccDpUtility.doAnalysis()
    
if __name__ == '__main__':
    unittest.main()