##
# File:    ChemCompWebAppLiteWorkerTest.py
# Date:    25-Feb-2021
#
# Updates:
# 25-Feb-2021 wmb Testing some ligand lite operations migrated to the backend
##

__docformat__ = "restructuredtext en"
__author__    = "Weslley Morellato Bueno"
__email__     = "wbueno@ebi.ac.uk"
__license__   = "Creative Commons Attribution 3.0 Unported"
__version__   = "V1.0"

import sys, unittest, traceback
import time, os, os.path

from wwpdb.utils.config.ConfigInfo                          import ConfigInfo
from wwpdb.utils.session.WebRequest                         import InputRequest
from wwpdb.utils.testing.Features                           import Features
from wwpdb.apps.ccmodule.webapp.ChemCompWebAppLite          import ChemCompWebAppLiteWorker

class ReportFilesRequestTest(unittest.TestCase):
    '''This class tests the API for requesting files generated by
    the chemical components report.

    '''
    def setUp(self):
        self.__verbose=True
        self.__lfh=sys.stderr
        self.__topPath=os.getenv('WWPDB_CCMODULE_TOP_PATH')
        #
        # Create a request object and session directories for test cases
        #
        self.__reqObj=InputRequest(paramDict={},verbose=self.__verbose,log=self.__lfh)
        self.__reqObj.setValue("WWPDB_SITE_ID",  "PDBE_DEV")
        self.__reqObj.setValue("TopSessionPath", self.__topPath)
        self.__reqObj.setValue("TopPath",        self.__topPath)
        self.__reqObj.setValue("identifier",    "D_800001")

        self.__siteId = str(self.__reqObj.getValue("WWPDB_SITE_ID"))
        self.__cI = ConfigInfo(self.__siteId)
        self.__depositPath = os.path.join(self.__cI.get("SITE_DEPOSIT_STORAGE_PATH"), 'deposit')

    def testGetReportInstanceSvg(self):
        self.__reqObj.setValue("source",        "author")
        self.__reqObj.setValue("file",          "1_A_F6R_501_.svg")

        # generating dummy svg file
        depid_dir = os.path.join(self.__depositPath, "D_800001", "cc_analysis")
        os.makedirs(depid_dir, exist_ok=True)
        
        with open(os.path.join(depid_dir, "1_A_F6R_501_.svg"), "w") as f:
            f.write("<svg></svg>")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose,log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["datafileName"], "1_A_F6R_501_.svg")
        self.assertEqual(rc._cD["datatype"], "image/svg+xml")
        self.assertEqual(rc._cD["datacontent"], b"<svg></svg>")
    
    def testGetReportReferenceGif(self):
        self.__reqObj.setValue("source",        "ccd")
        self.__reqObj.setValue("file",          "G6Q-noh.gif")
        self.__reqObj.setValue("ligid",         "G6Q")

        # generating dummy gif file
        gif_dir = os.path.join(self.__depositPath, "D_800001", "cc_analysis", "rfrnc_reports", "G6Q")
        os.makedirs(gif_dir, exist_ok=True)

        with open(os.path.join(gif_dir, "G6Q-noh.gif"), "w") as f:
            f.write("foo")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose,log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["datafileName"], "G6Q-noh.gif")
        self.assertEqual(rc._cD["datatype"], "image/gif")
        self.assertEqual(rc._cD["datacontent"], b"foo")
    
    def testGetReportCifFiles(self):
        self.__reqObj.setValue("source",        "ccd")
        self.__reqObj.setValue("file",          "G6Q_ideal.cif")
        self.__reqObj.setValue("ligid",         "G6Q")

        # generating dummy cif file
        cif_dir = os.path.join(self.__depositPath, "D_800001", "cc_analysis", "rfrnc_reports", "G6Q")
        os.makedirs(cif_dir, exist_ok=True)

        with open(os.path.join(cif_dir, "G6Q_ideal.cif"), "w") as f:
            f.write("data_2GC2")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose,log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["textcontent"], "data_2GC2")

        # now the cif for the instance
        self.__reqObj.setValue("source",        "author")
        self.__reqObj.setValue("file",          "F6R_model.cif")
        self.__reqObj.setValue("ligid",         "1_A_F6R_501_")

        # generating dummy cif file
        cif_dir = os.path.join(self.__depositPath, "D_800001", "cc_analysis", "1_A_F6R_501_", "report")
        os.makedirs(cif_dir, exist_ok=True)

        with open(os.path.join(cif_dir, "F6R_model.cif"), "w") as f:
            f.write("data_2GC2")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose,log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["textcontent"], "data_2GC2")
    
    def testInvalidRequest(self):
        self.__reqObj.setValue("source",        "ccd")
        self.__reqObj.setValue("ligid",          "F6R")
        self.__reqObj.setValue("file",          "../../../../../../../etc/passwd")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose,log=self.__lfh)
        rc = stw._getReportFile()

        print(rc._cD["textcontent"])
        self.assertEqual(rc._cD["errortext"], "File not found")
        self.assertEqual(rc._cD["statuscode"], 404)

        # ---

        self.__reqObj.setValue("source",        "foo")
        self.__reqObj.setValue("file",          "F6R_model.cif")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose,log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["errortext"], "Source should be either 'ccd' or 'author'")
        self.assertEqual(rc._cD["statuscode"], 400)

        # ---

        self.__reqObj.setValue("source",        "ccd")
        self.__reqObj.setValue("file",          "F6R_model$.cif")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose,log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["errortext"], "File not found")
        self.assertEqual(rc._cD["statuscode"], 404)
    
    def testGetLigandInstanceData(self):
        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose,log=self.__lfh)
        stw._getLigandInstancesData()
    
if __name__ == '__main__':
    unittest.main()